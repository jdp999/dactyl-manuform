diff --git a/create-models.sh b/create-models.sh
index a53c9dc..4a3b3fd 100644
--- a/create-models.sh
+++ b/create-models.sh
@@ -37,6 +37,17 @@ openscad -o things/left-6x6.stl  things/left-6x6.scad >/dev/null 2>&1 &
 git checkout src/dactyl_keyboard/dactyl.clj
 
 
+patch -p1 < 6x8.patch 
+lein run src/dactyl_keyboard/dactyl.clj
+cp things/right.scad things/right-6x8.scad
+cp things/left.scad things/left-6x8.scad
+cp things/right-plate.scad things/right-6x8-plate.scad
+openscad -o things/right-6x8-plate.dxf things/right-6x8-plate.scad >/dev/null 2>&1 &
+openscad -o things/right-6x8.stl things/right-6x8.scad >/dev/null 2>&1  &
+openscad -o things/left-6x8.stl  things/left-6x8.scad >/dev/null 2>&1 &
+git checkout src/dactyl_keyboard/dactyl.clj
+
+
 # git add things/*-4x5.stl
 # git add things/right-4x5-plate.dxf
 # git commit -m "Add CAD files"
diff --git a/src/dactyl_keyboard/dactyl.clj b/src/dactyl_keyboard/dactyl.clj
index f082903..10747bb 100644
--- a/src/dactyl_keyboard/dactyl.clj
+++ b/src/dactyl_keyboard/dactyl.clj
@@ -13,32 +13,32 @@
 ;; Shape parameters ;;
 ;;;;;;;;;;;;;;;;;;;;;;
 
-(def nrows 4)
-(def ncols 5)
+(def nrows 7)
+(def ncols 7)
 
-(def α (/ π 12))                        ; curvature of the columns
-(def β (/ π 36))                        ; curvature of the rows
+(def α (/ π 18))                        ; curvature of the columns
+(def β (/ π 24))                        ; curvature of the rows
 (def centerrow (- nrows 3))             ; controls front-back tilt
-(def centercol 4)                       ; controls left-right tilt / tenting (higher number is more tenting)
-(def tenting-angle (/ π 4))            ; or, change this for more precise tenting control
+(def centercol 1)                       ; controls left-right tilt / tenting (higher number is more tenting)
+(def tenting-angle (/ π 7))            ; or, change this for more precise tenting control
 (def column-style
   (if (> nrows 5) :orthographic :standard))  ; options include :standard, :orthographic, and :fixed
 ; (def column-style :fixed)
 
 (defn column-offset [column] (cond
   (= column 2) [0 2.82 -4.5]
-  (>= column 4) [0 -12 5.64]            ; original [0 -5.8 5.64]
+  (>= column 4) [0 -19 5.64]            ; original [0 -5.8 5.64]
   :else [0 0 0]))
 
-(def thumb-offsets [6 -3 -6])
+(def thumb-offsets [ 8 -6 -2 ])
 
-(def keyboard-z-offset 7)               ; controls overall height; original=9 with centercol=3; use 16 for centercol=2
+(def keyboard-z-offset 42)               ; controls overall height; original=9 with centercol=3; use 16 for centercol=2
 
 (def extra-width 2.5)                   ; extra space between the base of keys; original= 2
-(def extra-height 1.0)                  ; original= 0.5
+(def extra-height 2.0)                  ; original= 0.5
 
-(def wall-z-offset -15)                 ; length of the first downward-sloping part of the wall (negative)
-(def wall-xy-offset 8)                  ; offset in the x and/or y direction for the first downward-sloping part of the wall (negative)
+(def wall-z-offset -20)                 ; length of the first downward-sloping part of the wall (negative)
+(def wall-xy-offset 6)                  ; offset in the x and/or y direction for the first downward-sloping part of the wall (negative)
 (def wall-thickness 2)                  ; wall thickness parameter; originally 5
 
 ;; Settings for column-style == :fixed
@@ -173,12 +173,12 @@
                                 (translate-fn [(- (* (- column centercol) column-x-delta)) 0 column-z-delta])
                                 (translate-fn (column-offset column)))
         placed-shape-fixed (->> shape
-                                (rotate-y-fn  (nth fixed-angles column))
-                                (translate-fn [(nth fixed-x column) 0 (nth fixed-z column)])
-                                (translate-fn [0 0 (- (+ row-radius (nth fixed-z column)))])
+                                ;(rotate-y-fn  (nth fixed-angles column))
+                                ;(translate-fn [(nth fixed-x column) 0 (nth fixed-z column)])
+                                ;(translate-fn [0 0 (- (+ row-radius (nth fixed-z column)))])
                                 (rotate-x-fn  (* α (- centerrow row)))
-                                (translate-fn [0 0 (+ row-radius (nth fixed-z column))])
-                                (rotate-y-fn  fixed-tenting)
+                                ;(translate-fn [0 0 (+ row-radius (nth fixed-z column))])
+                                ;(rotate-y-fn  fixed-tenting)
                                 (translate-fn [0 (second (column-offset column)) 0])
                                 )]
     (->> (case column-style
@@ -713,13 +713,13 @@
                    (translate [0 0 -20] (cube 350 350 40))
                   ))
 
-(spit "things/right.scad"
+(spit "g:\\code\\dactyl-manuform\\things\\right.scad"
       (write-scad model-right))
 
-(spit "things/left.scad"
+(spit "g:\\code\\dactyl-manuform\\things\\left.scad"
       (write-scad (mirror [-1 0 0] model-right)))
 
-(spit "things/right-test.scad"
+(spit "g:\\code\\dactyl-manuform\\things\\right-test.scad"
       (write-scad
                    (union
                     key-holes
@@ -742,7 +742,7 @@
                                 ; wire-posts
                   )))
 
-(spit "things/right-plate.scad"
+(spit "g:\\code\\dactyl-manuform\\things\\right-plate.scad"
       (write-scad
                    (cut
                      (translate [0 0 -0.1]
@@ -753,7 +753,7 @@
                                    (translate [0 0 -10] screw-insert-screw-holes))
                   ))))
 
-(spit "things/test.scad"
+(spit "g:\\code\\dactyl-manuform\\things\\test.scad"
       (write-scad
          (difference usb-holder usb-holder-hole)))
 
